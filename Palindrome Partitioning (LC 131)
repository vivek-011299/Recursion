/*
*
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.
*
*/


Solution :-


vector<vector<string>> partition(string s) {
        vector<vector<string>>  res;
        vector<string> temp;
        solve(0,temp,res,s);
        return res;
    }
    
    
    
    void solve(int index,vector<string> temp,vector<vector<string>> &res,string s)
    {
        if(index==s.size())
        {
            res.push_back(temp);
            return;
        }
        for(int i=index;i<s.size();i++)
        {
            if(isPalindrome(s,index,i))
            {
                temp.push_back(s.substr(index,i - index+1));
                solve(i+1,temp,res,s);
                temp.pop_back();
            }
        }
    }
    
    
    bool isPalindrome(string s,int start,int end)
    {
        while(start<=end)
        {
            if(s[start++]!=s[end--])
            {
                return false;
            }
            
        }
        return true;
    }
