/*
*
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
*
*/


Solution :-

 bool isSafe(int row,int col,int n,vector<string>board)
    {
        int r=row;
        int c=col;
        while(r>=0 && c>=0)             //Left upper diagonal
        {
            if(board[r][c]=='Q')
                return false;
            r--;c--;
        }
        r=row;
        c=col;
        while(c>=0)                     //left
        {
            if(board[r][c]=='Q')
                return false;
            c--;
        }
        c=col;
        while(r<n && c>=0)              //Lower Left diagonal
        {
            if(board[r][c]=='Q')
                return false;
            r++;
            c--;
        }
        return true;                // We are not checking right side of chessboard because further calls on right side on board will check for left side...
                                    // And we are also not checking in the respective column beacuse whenever we are inserting a Q, we are moving the column pointer forward..
    }
    void solve(int col,vector<vector<string>> &ans,vector<string> &board,int n)
    {
        if(col==n)
        {
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(isSafe(row,col,n,board)==true)
            {
                board[row][col]='Q';
                solve(col+1,ans,board,n);
                board[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        solve(0,ans,board,n);
        return ans;
    }
